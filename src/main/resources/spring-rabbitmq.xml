<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:rabbit="http://www.springframework.org/schema/rabbit"-->
       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans-->
    <!--http://www.springframework.org/schema/beans/spring-beans-3.0.xsd-->
    <!--http://www.springframework.org/schema/rabbit-->
    <!--http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd" >-->

    <!--<rabbit:connection-factory id="conn"-->
                               <!--username="admin" password="password" host="192.168.73.219" port="5672"-->
                               <!--virtual-host="/" />-->

    <!--&lt;!&ndash; 定义rabbit template 用于数据的接收和发送 &ndash;&gt;-->
    <!--<rabbit:template id="amqTemplate" connection-factory="conn"-->
                     <!--exchange="exchangeTest"></rabbit:template>-->

    <!--&lt;!&ndash; 通过指定下面的admin信息，当前productor中的exchange和queue会在rabbitmq服务器上自动生成 &ndash;&gt;-->
    <!--<rabbit:admin connection-factory="conn" />-->

    <!--&lt;!&ndash;定义queue  说明：durable:是否持久化 exclusive: 仅创建者可以使用的私有队列，断开后自动删除 auto_delete: 当所有消费客户端连接断开后，是否自动删除队列&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:queue name="two.hello" durable="true" auto-delete="false" exclusive="false" />&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:queue name="queueTest" durable="true" auto-delete="false" exclusive="false" />&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:queue name="queueChris" durable="true" auto-delete="false" exclusive="false" />&ndash;&gt;-->
    <!--<rabbit:queue name="test.2" durable="true" auto-delete="false" exclusive="false" />-->

    <!--<rabbit:topic-exchange name="test_match"-->
                           <!--durable="true" auto-delete="false">-->
        <!--<rabbit:bindings>-->
            <!--&lt;!&ndash; 配置多个消费者 根据不同业务类型选择对应消费者  pattern="*.*.test1" &ndash;&gt;-->
            <!--<rabbit:binding queue="test.2" pattern="testkey"></rabbit:binding>-->
        <!--</rabbit:bindings>-->
    <!--</rabbit:topic-exchange>-->

    <!--&lt;!&ndash;topic 模式：发送端不是按固定的routing key发送消息，而是按字符串“匹配”发送，接收端同样如此。 &ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:topic-exchange name="mq.asdfExChange"&ndash;&gt;-->
                           <!--&lt;!&ndash;durable="true" auto-delete="false">&ndash;&gt;-->
        <!--&lt;!&ndash;<rabbit:bindings>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash; 配置多个消费者 根据不同业务类型选择对应消费者  pattern="*.*.test1" &ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;<rabbit:binding queue="two.hello" pattern="mq.*.send"></rabbit:binding>&ndash;&gt;-->
            <!--&lt;!&ndash;<rabbit:binding queue="queueTest" pattern="mq.*.send"></rabbit:binding>&ndash;&gt;-->
            <!--&lt;!&ndash;<rabbit:binding queue="queueChris" pattern="mq.*.send"></rabbit:binding>&ndash;&gt;-->

        <!--&lt;!&ndash;</rabbit:bindings>&ndash;&gt;-->
    <!--&lt;!&ndash;</rabbit:topic-exchange>&ndash;&gt;-->

    <!--&lt;!&ndash;&lt;!&ndash; fanout 模式:客户端中只要是与该路由绑定在一起的队列都会收到相关消息，这类似广播，发送端不管队列是谁，都由客户端自己去绑定，谁需要数据谁去绑定自己的相应队列 &ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:fanout-exchange name="delayed_message_exchange" durable="true" auto-delete="false" id="delayed_message_exchange">&ndash;&gt;-->
        <!--&lt;!&ndash;<rabbit:bindings>&ndash;&gt;-->
            <!--&lt;!&ndash;<rabbit:binding queue="two.hello"/>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;<rabbit:binding queue="queueTest"/>&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;<rabbit:binding queue="queueChris"/>&ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;</rabbit:bindings>&ndash;&gt;-->
    <!--&lt;!&ndash;</rabbit:fanout-exchange>&ndash;&gt;-->

    <!--&lt;!&ndash;&lt;!&ndash;定义direct-exchange direct 消息转换队列 绑定key，意思就是消息与一个特定的路由键匹配，会转发。rabbit:binding：设置消息queue匹配的key &ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:direct-exchange name="mq.qwerExChange" durable="true" auto-delete="false">&ndash;&gt;-->
        <!--&lt;!&ndash;<rabbit:bindings>&ndash;&gt;-->
            <!--&lt;!&ndash;<rabbit:binding queue="two.hello" key="mq.qwer.send" ></rabbit:binding>&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;<rabbit:binding queue="queueTest" key="mq.qwer.send2" ></rabbit:binding>&ndash;&gt;&ndash;&gt;-->
            <!--&lt;!&ndash;&lt;!&ndash;<rabbit:binding queue="queueChris" key="mq.qwer.send3" ></rabbit:binding>&ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;</rabbit:bindings>&ndash;&gt;-->
    <!--&lt;!&ndash;</rabbit:direct-exchange>&ndash;&gt;-->


    <!--&lt;!&ndash; 消息接收者 &ndash;&gt;-->

    <!--<bean id="asdfConsumer" class="com.kdmt.gxd.easy.util.rabbitMq.Consumor"></bean>-->
    <!--&lt;!&ndash;<bean id="asdfConsumer2" class="com.kdmt.gxd.easy.util.rabbitMq.Consumor2"></bean>&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="qwerConsumer3" class="com.kdmt.gxd.easy.util.rabbitMq.Consumor3"></bean>&ndash;&gt;-->
    <!--&lt;!&ndash; queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象-->
    <!--acknowledeg = "manual"，意为表示该消费者的ack方式为手动&ndash;&gt;-->
    <!--<rabbit:listener-container connection-factory="conn"  acknowledge="manual">-->
        <!--<rabbit:listener  queues="test.2"  ref="asdfConsumer"/>-->
    <!--</rabbit:listener-container>-->

    <!--&lt;!&ndash;<rabbit:listener-container connection-factory="conn" acknowledge="manual">&ndash;&gt;-->
        <!--&lt;!&ndash;<rabbit:listener  queues="test.2"  ref="asdfConsumer2"/>&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash;queueTest&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;</rabbit:listener-container>&ndash;&gt;-->
    <!--&lt;!&ndash;<rabbit:listener-container connection-factory="conn" acknowledge="manual">&ndash;&gt;-->
        <!--&lt;!&ndash;<rabbit:listener  queues="test.2"  ref="qwerConsumer3"/>&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash;queueChris&ndash;&gt;&ndash;&gt;-->
    <!--&lt;!&ndash;</rabbit:listener-container>&ndash;&gt;-->




<!--</beans>-->

